MongoDB README
mark: INstall cmd - elevated
crete folders dat & log
C:\MongoDB\bin>mongod --directoryperdb --dbpath C:\mongodb\data\db --logpath C:\mongodb\log\mongo.log --logappend --rest --install

--Run Services
net start MongoDB

-- we run in MOngo shell simply type mono from bin
>cls
--Show databases
>show dbs
--shows one default database called: local

--create new database call my customers, and it would also switch to the db
>use mycustomers

--what databse am I in : keyword: db
>db


--create user
use mycustomers
db.createUser(
	{
		user:"brad",
		pwd:"1234",
		roles:["readWrite","dbAdmin"]
	}
);

--Create Collections (Similar to tables in relational database) - hold documents or records
>db.createCollection('customers');

>show collections

--Insert Document into Collection: customers
>db.customers.insert({first_name:"John",last_name:"Doe"});

--Find / See the documents in a collection
>db.customers.find()
--FInd for readability
>db.customers.find().pretty();


-->returns:{ "_id" : ObjectId("5991123dbdd383fb91d30fc2"), "first_name" : "John", "last_name" : "Doe" } 
	--Unique id is automatically created.

--To add more, we can simply use array []
--Also add a field on fly..like gender
>db.customers.insert([{first_name:"Steven",last_name:"Smith"},{first_name:"Joan",last_name:"Johnson",gender:"F"}]);


--UPDATE field (in production, we'll use unique field like object ID)
db.customers.update({first_name:"John"},{"first_name" : "John", "last_name" : "Doe",gender"M"});
--to update only one field -oin order not to replace entire field use SET
db.customers.update({first_name:"Steven"},{$set:{gender:"M"}})


--Operator INC to increment numeric values
db.customers.update({first_name:"Steven"},{$set:{age:45}});
db.customers.update({first_name:"Steven"},{$inc:{age:5}});

--Operator UNSET - to remove a field
db.customers.update({first_name:"Steven"},{$unset:{age:1}});

--update result NOT found
db.customers.update({first_name:"Mary"},{"first_name" : "Mary", "last_name" : "Samson"});
--returns result of 0 to all
--update result NOT found - if not found the insert with UPSERT
db.customers.update({first_name:"Mary"},{"first_name" : "Mary", "last_name" : "Samson"},{upsert: true });


--operator RENAME
db.customers.update({first_name:"Steven"},{$rename:{"gender":"sex"}});


--REMOVE documents
db.customers.remove({first_name="Steven"});
-add parameter to remove only the first steven it find JUSTONE --true or 1
db.customers.remove({first_name="Steven"},{justone:true});


--add more records 
--use FIND with parameter
db.customers.find({first_name:"John"});
--use FIND with parameter with OR
db.customers.find({$or:[{first_name:"John"},{first_name:"Mary"}]});
db.customers.find({gender:"M"});

--operator < > <= >=    $lt: $gt $lte $gte
db.customers.find({age:{$gt:20}});
db.customers.find({age:{$lte:45}});
db.customers.find({age:{$lte:45}}).pretty();

db.customers.find({"address.city":"Boston"});

--QUERY Arrays
d.customers.find({memberships:"mem1"});


--SORTING  :1 Ascending :-1 Desc
db.customers.find().sort({last_name:1});


--COUNTING .count
db.customers.find().count()
db.customers.find({age:45}).count()

--LIMIT - first 2 records
db.customers.find().limit(2);
db.customers.find().limit(2).sort({lat_name:1});

--FOREACH itterate through
db.customers.find().forEach(function(doc){print("Customer Name: "+doc.first_name)});



--Document syntax (like JSON)
{
	first_name:"John",
	last_name:"Doe",
	memberships:["mem1","mem2"],
	address:{
		street:"Main Street",
		city:"Tulsa"
	}
	contacts:[
		{name:"joe", relationship:"friend"},
	]
}



















Welcome to MongoDB!

COMPONENTS

  bin/mongod - The database process.
  bin/mongos - Sharding controller.
  bin/mongo  - The database shell (uses interactive javascript).

UTILITIES

  bin/mongodump         - MongoDB dump tool - for backups, snapshots, etc..
  bin/mongorestore      - MongoDB restore a dump
  bin/mongoexport       - Export a single collection to test (JSON, CSV)
  bin/mongoimport       - Import from JSON or CSV
  bin/mongofiles        - Utility for putting and getting files from MongoDB GridFS
  bin/mongostat         - Show performance statistics

RUNNING

  For command line options invoke:

    $ ./mongod --help

  To run a single server database:

    $ mkdir /data/db
    $ ./mongod
    $
    $ # The mongo javascript shell connects to localhost and test database by default:
    $ ./mongo 
    > help

DRIVERS

  Client drivers for most programming languages are available at mongodb.org.  Use the 
  shell ("mongo") for administrative tasks.

DOCUMENTATION

  http://www.mongodb.org/

MAIL LISTS AND IRC

  http://dochub.mongodb.org/core/community

32 BIT BUILD NOTES

  MongoDB uses memory mapped files.  If built as a 32 bit executable, you will
  not be able to work with large (multi-gigabyte) databases.  However, 32 bit
  builds work fine with small development databases.
